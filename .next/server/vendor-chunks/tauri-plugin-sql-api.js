"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tauri-plugin-sql-api";
exports.ids = ["vendor-chunks/tauri-plugin-sql-api"];
exports.modules = {

/***/ "(ssr)/./node_modules/tauri-plugin-sql-api/dist-js/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/tauri-plugin-sql-api/dist-js/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Database)\n/* harmony export */ });\n/* harmony import */ var _tauri_apps_api_tauri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tauri-apps/api/tauri */ \"(ssr)/./node_modules/@tauri-apps/api/tauri.js\");\n\n\n/**\n * **Database**\n *\n * The `Database` class serves as the primary interface for\n * communicating with the rust side of the sql plugin.\n */\nclass Database {\n    constructor(path) {\n        this.path = path;\n    }\n    /**\n     * **load**\n     *\n     * A static initializer which connects to the underlying database and\n     * returns a `Database` instance once a connection to the database is established.\n     *\n     * # Sqlite\n     *\n     * The path is relative to `tauri::api::path::BaseDirectory::App` and must start with `sqlite:`.\n     *\n     * @example\n     * ```ts\n     * const db = await Database.load(\"sqlite:test.db\");\n     * ```\n     */\n    static async load(path) {\n        const _path = await (0,_tauri_apps_api_tauri__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:sql|load\", {\n            db: path,\n        });\n        return new Database(_path);\n    }\n    /**\n     * **get**\n     *\n     * A static initializer which synchronously returns an instance of\n     * the Database class while deferring the actual database connection\n     * until the first invocation or selection on the database.\n     *\n     * # Sqlite\n     *\n     * The path is relative to `tauri::api::path::BaseDirectory::App` and must start with `sqlite:`.\n     *\n     * @example\n     * ```ts\n     * const db = Database.get(\"sqlite:test.db\");\n     * ```\n     */\n    static get(path) {\n        return new Database(path);\n    }\n    /**\n     * **execute**\n     *\n     * Passes a SQL expression to the database for execution.\n     *\n     * @example\n     * ```ts\n     * // for sqlite & postgres\n     * // INSERT example\n     * const result = await db.execute(\n     *    \"INSERT into todos (id, title, status) VALUES ($1, $2, $3)\",\n     *    [ todos.id, todos.title, todos.status ]\n     * );\n     * // UPDATE example\n     * const result = await db.execute(\n     *    \"UPDATE todos SET title = $1, completed = $2 WHERE id = $3\",\n     *    [ todos.title, todos.status, todos.id ]\n     * );\n     *\n     * // for mysql\n     * // INSERT example\n     * const result = await db.execute(\n     *    \"INSERT into todos (id, title, status) VALUES (?, ?, ?)\",\n     *    [ todos.id, todos.title, todos.status ]\n     * );\n     * // UPDATE example\n     * const result = await db.execute(\n     *    \"UPDATE todos SET title = ?, completed = ? WHERE id = ?\",\n     *    [ todos.title, todos.status, todos.id ]\n     * );\n     * ```\n     */\n    async execute(query, bindValues) {\n        const [rowsAffected, lastInsertId] = await (0,_tauri_apps_api_tauri__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:sql|execute\", {\n            db: this.path,\n            query,\n            values: bindValues !== null && bindValues !== void 0 ? bindValues : [],\n        });\n        return {\n            lastInsertId,\n            rowsAffected,\n        };\n    }\n    /**\n     * **select**\n     *\n     * Passes in a SELECT query to the database for execution.\n     *\n     * @example\n     * ```ts\n     * // for sqlite & postgres\n     * const result = await db.select(\n     *    \"SELECT * from todos WHERE id = $1\", id\n     * );\n     *\n     * // for mysql\n     * const result = await db.select(\n     *    \"SELECT * from todos WHERE id = ?\", id\n     * );\n     * ```\n     */\n    async select(query, bindValues) {\n        const result = await (0,_tauri_apps_api_tauri__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:sql|select\", {\n            db: this.path,\n            query,\n            values: bindValues !== null && bindValues !== void 0 ? bindValues : [],\n        });\n        return result;\n    }\n    /**\n     * **close**\n     *\n     * Closes the database connection pool.\n     *\n     * @example\n     * ```ts\n     * const success = await db.close()\n     * ```\n     * @param db - Optionally state the name of a database if you are managing more than one. Otherwise, all database pools will be in scope.\n     */\n    async close(db) {\n        const success = await (0,_tauri_apps_api_tauri__WEBPACK_IMPORTED_MODULE_0__.invoke)(\"plugin:sql|close\", {\n            db,\n        });\n        return success;\n    }\n}\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGF1cmktcGx1Z2luLXNxbC1hcGkvZGlzdC1qcy9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkRBQU07QUFDbEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELDZEQUFNO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkRBQU07QUFDbkM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNkRBQU07QUFDcEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUUrQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3NlLWFwcC8uL25vZGVfbW9kdWxlcy90YXVyaS1wbHVnaW4tc3FsLWFwaS9kaXN0LWpzL2luZGV4Lm1qcz9mZmU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludm9rZSB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS90YXVyaSc7XG5cbi8qKlxuICogKipEYXRhYmFzZSoqXG4gKlxuICogVGhlIGBEYXRhYmFzZWAgY2xhc3Mgc2VydmVzIGFzIHRoZSBwcmltYXJ5IGludGVyZmFjZSBmb3JcbiAqIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgcnVzdCBzaWRlIG9mIHRoZSBzcWwgcGx1Z2luLlxuICovXG5jbGFzcyBEYXRhYmFzZSB7XG4gICAgY29uc3RydWN0b3IocGF0aCkge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKmxvYWQqKlxuICAgICAqXG4gICAgICogQSBzdGF0aWMgaW5pdGlhbGl6ZXIgd2hpY2ggY29ubmVjdHMgdG8gdGhlIHVuZGVybHlpbmcgZGF0YWJhc2UgYW5kXG4gICAgICogcmV0dXJucyBhIGBEYXRhYmFzZWAgaW5zdGFuY2Ugb25jZSBhIGNvbm5lY3Rpb24gdG8gdGhlIGRhdGFiYXNlIGlzIGVzdGFibGlzaGVkLlxuICAgICAqXG4gICAgICogIyBTcWxpdGVcbiAgICAgKlxuICAgICAqIFRoZSBwYXRoIGlzIHJlbGF0aXZlIHRvIGB0YXVyaTo6YXBpOjpwYXRoOjpCYXNlRGlyZWN0b3J5OjpBcHBgIGFuZCBtdXN0IHN0YXJ0IHdpdGggYHNxbGl0ZTpgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGRiID0gYXdhaXQgRGF0YWJhc2UubG9hZChcInNxbGl0ZTp0ZXN0LmRiXCIpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsb2FkKHBhdGgpIHtcbiAgICAgICAgY29uc3QgX3BhdGggPSBhd2FpdCBpbnZva2UoXCJwbHVnaW46c3FsfGxvYWRcIiwge1xuICAgICAgICAgICAgZGI6IHBhdGgsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IERhdGFiYXNlKF9wYXRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogKipnZXQqKlxuICAgICAqXG4gICAgICogQSBzdGF0aWMgaW5pdGlhbGl6ZXIgd2hpY2ggc3luY2hyb25vdXNseSByZXR1cm5zIGFuIGluc3RhbmNlIG9mXG4gICAgICogdGhlIERhdGFiYXNlIGNsYXNzIHdoaWxlIGRlZmVycmluZyB0aGUgYWN0dWFsIGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgICAgKiB1bnRpbCB0aGUgZmlyc3QgaW52b2NhdGlvbiBvciBzZWxlY3Rpb24gb24gdGhlIGRhdGFiYXNlLlxuICAgICAqXG4gICAgICogIyBTcWxpdGVcbiAgICAgKlxuICAgICAqIFRoZSBwYXRoIGlzIHJlbGF0aXZlIHRvIGB0YXVyaTo6YXBpOjpwYXRoOjpCYXNlRGlyZWN0b3J5OjpBcHBgIGFuZCBtdXN0IHN0YXJ0IHdpdGggYHNxbGl0ZTpgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGRiID0gRGF0YWJhc2UuZ2V0KFwic3FsaXRlOnRlc3QuZGJcIik7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhdGljIGdldChwYXRoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YWJhc2UocGF0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqZXhlY3V0ZSoqXG4gICAgICpcbiAgICAgKiBQYXNzZXMgYSBTUUwgZXhwcmVzc2lvbiB0byB0aGUgZGF0YWJhc2UgZm9yIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiAvLyBmb3Igc3FsaXRlICYgcG9zdGdyZXNcbiAgICAgKiAvLyBJTlNFUlQgZXhhbXBsZVxuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLmV4ZWN1dGUoXG4gICAgICogICAgXCJJTlNFUlQgaW50byB0b2RvcyAoaWQsIHRpdGxlLCBzdGF0dXMpIFZBTFVFUyAoJDEsICQyLCAkMylcIixcbiAgICAgKiAgICBbIHRvZG9zLmlkLCB0b2Rvcy50aXRsZSwgdG9kb3Muc3RhdHVzIF1cbiAgICAgKiApO1xuICAgICAqIC8vIFVQREFURSBleGFtcGxlXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShcbiAgICAgKiAgICBcIlVQREFURSB0b2RvcyBTRVQgdGl0bGUgPSAkMSwgY29tcGxldGVkID0gJDIgV0hFUkUgaWQgPSAkM1wiLFxuICAgICAqICAgIFsgdG9kb3MudGl0bGUsIHRvZG9zLnN0YXR1cywgdG9kb3MuaWQgXVxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyBmb3IgbXlzcWxcbiAgICAgKiAvLyBJTlNFUlQgZXhhbXBsZVxuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLmV4ZWN1dGUoXG4gICAgICogICAgXCJJTlNFUlQgaW50byB0b2RvcyAoaWQsIHRpdGxlLCBzdGF0dXMpIFZBTFVFUyAoPywgPywgPylcIixcbiAgICAgKiAgICBbIHRvZG9zLmlkLCB0b2Rvcy50aXRsZSwgdG9kb3Muc3RhdHVzIF1cbiAgICAgKiApO1xuICAgICAqIC8vIFVQREFURSBleGFtcGxlXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuZXhlY3V0ZShcbiAgICAgKiAgICBcIlVQREFURSB0b2RvcyBTRVQgdGl0bGUgPSA/LCBjb21wbGV0ZWQgPSA/IFdIRVJFIGlkID0gP1wiLFxuICAgICAqICAgIFsgdG9kb3MudGl0bGUsIHRvZG9zLnN0YXR1cywgdG9kb3MuaWQgXVxuICAgICAqICk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShxdWVyeSwgYmluZFZhbHVlcykge1xuICAgICAgICBjb25zdCBbcm93c0FmZmVjdGVkLCBsYXN0SW5zZXJ0SWRdID0gYXdhaXQgaW52b2tlKFwicGx1Z2luOnNxbHxleGVjdXRlXCIsIHtcbiAgICAgICAgICAgIGRiOiB0aGlzLnBhdGgsXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHZhbHVlczogYmluZFZhbHVlcyAhPT0gbnVsbCAmJiBiaW5kVmFsdWVzICE9PSB2b2lkIDAgPyBiaW5kVmFsdWVzIDogW10sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFzdEluc2VydElkLFxuICAgICAgICAgICAgcm93c0FmZmVjdGVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAqKnNlbGVjdCoqXG4gICAgICpcbiAgICAgKiBQYXNzZXMgaW4gYSBTRUxFQ1QgcXVlcnkgdG8gdGhlIGRhdGFiYXNlIGZvciBleGVjdXRpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogLy8gZm9yIHNxbGl0ZSAmIHBvc3RncmVzXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgZGIuc2VsZWN0KFxuICAgICAqICAgIFwiU0VMRUNUICogZnJvbSB0b2RvcyBXSEVSRSBpZCA9ICQxXCIsIGlkXG4gICAgICogKTtcbiAgICAgKlxuICAgICAqIC8vIGZvciBteXNxbFxuICAgICAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiLnNlbGVjdChcbiAgICAgKiAgICBcIlNFTEVDVCAqIGZyb20gdG9kb3MgV0hFUkUgaWQgPSA/XCIsIGlkXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyBzZWxlY3QocXVlcnksIGJpbmRWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW52b2tlKFwicGx1Z2luOnNxbHxzZWxlY3RcIiwge1xuICAgICAgICAgICAgZGI6IHRoaXMucGF0aCxcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgdmFsdWVzOiBiaW5kVmFsdWVzICE9PSBudWxsICYmIGJpbmRWYWx1ZXMgIT09IHZvaWQgMCA/IGJpbmRWYWx1ZXMgOiBbXSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICoqY2xvc2UqKlxuICAgICAqXG4gICAgICogQ2xvc2VzIHRoZSBkYXRhYmFzZSBjb25uZWN0aW9uIHBvb2wuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGRiLmNsb3NlKClcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZGIgLSBPcHRpb25hbGx5IHN0YXRlIHRoZSBuYW1lIG9mIGEgZGF0YWJhc2UgaWYgeW91IGFyZSBtYW5hZ2luZyBtb3JlIHRoYW4gb25lLiBPdGhlcndpc2UsIGFsbCBkYXRhYmFzZSBwb29scyB3aWxsIGJlIGluIHNjb3BlLlxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlKGRiKSB7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBpbnZva2UoXCJwbHVnaW46c3FsfGNsb3NlXCIsIHtcbiAgICAgICAgICAgIGRiLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XG4gICAgfVxufVxuXG5leHBvcnQgeyBEYXRhYmFzZSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tauri-plugin-sql-api/dist-js/index.mjs\n");

/***/ })

};
;